#include "random.hpp"

#include <cinttypes>
#include <cmath>

double utilties::perlin_noise(double x_in, double y_in, double z_in) {
	constexpr static uint8_t p[512] = {
	    151, 160, 137, 91,  90,  15,  131, 13,  201, 95,  96,  53,  194, 233, 7,   225, 140, 36,  103, 30,  69,  142,
	    8,   99,  37,  240, 21,  10,  23,  190, 6,   148, 247, 120, 234, 75,  0,   26,  197, 62,  94,  252, 219, 203,
	    117, 35,  11,  32,  57,  177, 33,  88,  237, 149, 56,  87,  174, 20,  125, 136, 171, 168, 68,  175, 74,  165,
	    71,  134, 139, 48,  27,  166, 77,  146, 158, 231, 83,  111, 229, 122, 60,  211, 133, 230, 220, 105, 92,  41,
	    55,  46,  245, 40,  244, 102, 143, 54,  65,  25,  63,  161, 1,   216, 80,  73,  209, 76,  132, 187, 208, 89,
	    18,  169, 200, 196, 135, 130, 116, 188, 159, 86,  164, 100, 109, 198, 173, 186, 3,   64,  52,  217, 226, 250,
	    124, 123, 5,   202, 38,  147, 118, 126, 255, 82,  85,  212, 207, 206, 59,  227, 47,  16,  58,  17,  182, 189,
	    28,  42,  223, 183, 170, 213, 119, 248, 152, 2,   44,  154, 163, 70,  221, 153, 101, 155, 167, 43,  172, 9,
	    129, 22,  39,  253, 19,  98,  108, 110, 79,  113, 224, 232, 178, 185, 112, 104, 218, 246, 97,  228, 251, 34,
	    242, 193, 238, 210, 144, 12,  191, 179, 162, 241, 81,  51,  145, 235, 249, 14,  239, 107, 49,  192, 214, 31,
	    181, 199, 106, 157, 184, 84,  204, 176, 115, 121, 50,  45,  127, 4,   150, 254, 138, 236, 205, 93,  222, 114,
	    67,  29,  24,  72,  243, 141, 128, 195, 78,  66,  215, 61,  156, 180, // Repeats...
	    151, 160, 137, 91,  90,  15,  131, 13,  201, 95,  96,  53,  194, 233, 7,   225, 140, 36,  103, 30,  69,  142,
	    8,   99,  37,  240, 21,  10,  23,  190, 6,   148, 247, 120, 234, 75,  0,   26,  197, 62,  94,  252, 219, 203,
	    117, 35,  11,  32,  57,  177, 33,  88,  237, 149, 56,  87,  174, 20,  125, 136, 171, 168, 68,  175, 74,  165,
	    71,  134, 139, 48,  27,  166, 77,  146, 158, 231, 83,  111, 229, 122, 60,  211, 133, 230, 220, 105, 92,  41,
	    55,  46,  245, 40,  244, 102, 143, 54,  65,  25,  63,  161, 1,   216, 80,  73,  209, 76,  132, 187, 208, 89,
	    18,  169, 200, 196, 135, 130, 116, 188, 159, 86,  164, 100, 109, 198, 173, 186, 3,   64,  52,  217, 226, 250,
	    124, 123, 5,   202, 38,  147, 118, 126, 255, 82,  85,  212, 207, 206, 59,  227, 47,  16,  58,  17,  182, 189,
	    28,  42,  223, 183, 170, 213, 119, 248, 152, 2,   44,  154, 163, 70,  221, 153, 101, 155, 167, 43,  172, 9,
	    129, 22,  39,  253, 19,  98,  108, 110, 79,  113, 224, 232, 178, 185, 112, 104, 218, 246, 97,  228, 251, 34,
	    242, 193, 238, 210, 144, 12,  191, 179, 162, 241, 81,  51,  145, 235, 249, 14,  239, 107, 49,  192, 214, 31,
	    181, 199, 106, 157, 184, 84,  204, 176, 115, 121, 50,  45,  127, 4,   150, 254, 138, 236, 205, 93,  222, 114,
	    67,  29,  24,  72,  243, 141, 128, 195, 78,  66,  215, 61,  156, 180};

	auto fade = [](double t) -> double { return t * t * t * (t * (t * 6 - 15) + 10); };

	auto lerp = [](double t, double a, double b) -> double { return a + t * (b - a); };

	auto grad = [](int64_t hash, double x, double y, double z) -> double {
		int64_t h = hash & 0xF;
		double u = h < 8 ? x : y;
		double v = h < 4 ? y : (h == 12 || h == 14 ? x : z);

		return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
	};

	int64_t X = static_cast<int64_t>(std::floor(x_in)) & 0xFFLL;
	int64_t Y = static_cast<int64_t>(std::floor(y_in)) & 0xFFLL;
	int64_t Z = static_cast<int64_t>(std::floor(z_in)) & 0xFFLL;

	double x = x_in - std::floor(x_in);
	double y = y_in - std::floor(y_in);
	double z = z_in - std::floor(z_in);

	double u = fade(x);
	double v = fade(y);
	double w = fade(z);

	// clang-format off

	int64_t A  = p[X] + Y;
	int64_t AA = p[A] + Z;
	int64_t AB = p[A+1] + Z;
	int64_t B  = p[X+1] + Y;
	int64_t BA = p[B] + Z;
	int64_t BB = p[B+1] + Z;

	double side1 = grad(p[AA  ], x  , y  , z   );
	double side2 = grad(p[BA  ], x-1, y  , z   );
	double side3 = grad(p[AB  ], x  , y-1, z   );
	double side4 = grad(p[BB  ], x-1, y-1, z   );
	double side5 = grad(p[AA+1], x  , y  , z-1 );
	double side6 = grad(p[BA+1], x-1, y  , z-1 );
	double side7 = grad(p[AB+1], x  , y-1, z-1 );
	double side8 = grad(p[BB+1], x-1, y-1, z-1 );

	// clang-format on

	double reduce_a1 = lerp(u, side1, side2);
	double reduce_a2 = lerp(u, side3, side4);
	double reduce_a3 = lerp(u, side5, side6);
	double reduce_a4 = lerp(u, side7, side8);

	double reduce_b1 = lerp(v, reduce_a1, reduce_a2);
	double reduce_b2 = lerp(v, reduce_a3, reduce_a4);

	double reduce_c1 = lerp(w, reduce_b1, reduce_b2);

	return reduce_c1;
}
